incb    i sirve para i++
cltq extiende eax a rax 

------------------------- COMENTARIOS SIGNIFICATIVOS ------------------------------------------------------------------------
--------------------------  EJEMPLO ARREGLO 8 BITS IF CON DIRECCIONAMIENTO-------------------------------------------------------------------------

.data
    //int8_t a[6]={45,32,-28,72,-40,7};  
    a: .byte 45,32,-28,72,-40,7
    //int8_t sum,i;
    sum: .byte 0 
    i: .byte 0 
    fmt: .asciz "sum = %d\n"
.text
.global main
main:
	# your code goes here
	
	pushq %rbx
	
    //while(i<6)
    //{	
initw1:
    cmpb    $6,i
    jnl     endw1
    //sum=sum+a[i];
    movsbl  i,%eax      // (i) significa el valor, i significa la direccion para los comentarios 
    cltq                //rax <-- (i) eb 64 bits 
    movb    a(%rax),%al  //al <-- (a[i]) en 8 bits 
    addb    %al,sum     //sum <-- (a[i] + sum) en 8 bits 
    //i++;
    incb    i 
    jmp     initw1
    //}
endw1:
	
	//printf("sum = %d\n",sum);
	movsbl  sum,%esi 
	movl    $fmt,%edi
	movl    $0,%eax
	call    printf
	
	//return 0;
	xor	%eax, %eax
	popq %rbx
	ret
---------------------------------------------------------------------------------------------------------------------
MISMO EJEMPLO DE ARRIBA PERO CON 16 BITS (WORD)---------------------------------------------------------------------

.data
    //int16_t a[6]={4587,16425,-28724,19324,-4087,700};     
    a: .word 4587,16425,-28724,19324,-4087,700   
    //int16_t sum;
    sum: .word 0 
    //int8_t;
    i: .byte 0 
    fmt: .asciz "sum = %d\n"
.text
.global main
main:
	# your code goes here
	
	pushq %rbx
	
    //while(i<6)
    //{	
initw1:
    cmpb    $6,i                //(i)-6  
    jnl     endw1               //if condition not true jump to end of while loop
    //sum=sum+a[i];
    movsbl  i,%eax              //eax <-- (i) in 32 bits 
    cltq                        //rax <-- (i) in 64 bits 
    movw    a(,%rax,2),%ax      //ax <-- (a+(i)*2) 16 bits<--> ax <-- a[i]
    addw    %ax,sum             //sum <-- (sum) + a[i]
    //i++;
    incb    i                   //i <-- (i) + 1
    jmp     initw1              //jump to evaluate while condition 
    //}
endw1:
	
	//printf("sum = %d\n",sum);
	movswl  sum,%esi 
	movl    $fmt,%edi
	movl    $0,%eax
	call    printf
	
	//return 0;
	xor	%eax, %eax
	popq %rbx
	ret

---------------------------------------------------------------------------------------------------------------------------------------------
AHORA DE DWORD (32 BITS) 

#include <stdio.h>
#include <stdint.h>

int32_t a[6]={458700,1573147902,-1345456763,19324000,-40870009,7000000};      
int32_t sum;
int8_t i;

int main()
{
   
    while(i<6)
    {
        sum=sum+a[i];
        i++;
    }
    
    printf("sum = %d\n",sum); 

    return 0;
}

------------------------------ FLOTANTE ----------------------------------------------------
.data
    //float a[6]={4356.786,234987.8,70000.65,-43345.83,3456.45,-10345.63};  
    a: .float  4356.786,234987.8,70000.65,-43345.83,3456.45,-10345.63
    //float sum;
    sum: .long 0 
    //int8_t;
    i: .byte 0 
    fmt: .asciz "sum = %f\n"
.text
.global main
main:
	# your code goes here
	
	pushq %rbx
	
    //while(i<6)
    //{	
initw1:
    cmpb    $6,i                    //(i)-6  
    jnl     endw1                   //if condition not true jump to end of while loop
    //sum=sum+a[i];
    movsbl  i,%eax                  //eax <-- (i) in 32 bits 
    cltq                            //rax <-- (i) in 64 bits 
    movss   a(,%rax,4),%xmm1        //xmm1 <-- (a+(i)*4) 32 bits <--> xmm1 <-- a[i]
    movss   sum,%xmm0               //xmm0 <-- sum
    addss   %xmm1,%xmm0             //xmm0 <-- (sum) + a[i]
    movss   %xmm0,sum               //sum <-- (sum) + a[i]
    //i++;
    incb    i                       //i <-- (i) + 1
    jmp     initw1                  //jump to evaluate while condition 
    //}
endw1:
	
	//printf("sum = %f\n",sum);
	movss    sum,%xmm0
    cvtss2sd %xmm0,%xmm0
	movl     $fmt,%edi
	movl     $1,%eax
	call     printf
	
	//return 0;
	xor	%eax, %eax
	popq %rbx
	ret

