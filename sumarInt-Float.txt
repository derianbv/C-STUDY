Idea, pasar de este código: 

#include <stdio.h>
#include <stdint.h>

float x=3.14,y=4.2;
int8_t q=5,v=0,w=9;

int main()
{
    
    x=x+q;
    
    x=x+y;

    v=x;
    
    v=v+w;
    
    printf("x = %f\n",x);
    printf("v = %d\n",v);

    return 0;
}


a ensamblador: --------------------------------------------------------------------------------------------------------------------------------------------
Los números flotantes no se pueden operar en el ALU (ARITMETI LOGIC UNIT), esta parte del pc es la que trabaja con los registros de %eax %ebx %ecx, sino, los maneja una unidad que se llama Floating Point Unit, y para esta unidad se utiliza %xmm0 o %xmm1. Tambien
%eax tiene 32 bits, %mm0 tiene 128 bits. 

🧩 Resumen rápido:
👉 Los enteros usan %eax, %ebx porque trabajan con la ALU.
👉 Los flotantes usan %xmm0, %xmm1 porque se procesan en la FPU/SSE.

movsbl MOVe con Sign extension a un Byte para convertirlo en un Long (32 bits).
mov y el signed byte a long

❗ Problema real:
mov $-4, %al     # al = 11111100
mov %al, %eax    # eax = ???????? ???????? ???????? 11111100



┌──────────────┐
│   %rax       │ 64 bits (registro completo en x86-64)
├──────────────┤
│   %eax       │ 32 bits (parte baja de %rax)
├──────┬───────┤
│ %ah  │ %al   │ 8 bits altos y bajos de los 16 bits bajos de %ax
├──────┴───────┤
│   %ax        │ 16 bits (parte baja de %eax)
└──────────────┘


Para las funciones de call + funcion, este es el orden para buscar cosas por el call: 

| Tipo de argumento      | Registro donde lo busca |
| ---------------------- | ----------------------- |
| 1er `double` / `float` | `%xmm0`                 |
| 2do `double` / `float` | `%xmm1`                 |
| 1er `int` / puntero    | `%rdi`                  |
| 2do `int`              | `%rsi`                  |
| etc.                   | ...                     |



Tipo de función	Ejemplo	¿Sabe cuántos argumentos recibe?
Fija	void saluda(int a, float b)	✅ Sí, el compilador lo sabe
Variádica	int printf(const char*, ...)	❌ No, el compilador NO lo sabe, los ... implica que pueden haber mas argumentos 


En particular:
⚠️ Cuando llamas a una función variádica y pasas argumentos de punto flotante (float o double), debes:

Pasarlos por los registros %xmm0, %xmm1, etc.

Y poner en %eax cuántos %xmm estás usando.


| Función    | Firma en C                                                   | ¿Variádica? | ¿Necesita `mov $N, %eax` antes de `call`?       |
| ---------- | ------------------------------------------------------------ | ----------- | ----------------------------------------------- |
| `printf`   | `int printf(const char* fmt, ...)`                           | ✅ Sí        | ✅ **Sí** (ej. `mov $1, %eax` si pasas un float) |
| `scanf`    | `int scanf(const char* fmt, ...)`                            | ✅ Sí        | ✅ **Sí**                                        |
| `fprintf`  | `int fprintf(FILE* stream, const char* fmt, ...)`            | ✅ Sí        | ✅ **Sí**                                        |
| `sprintf`  | `int sprintf(char* str, const char* fmt, ...)`               | ✅ Sí        | ✅ **Sí**                                        |
| `snprintf` | `int snprintf(char* str, size_t size, const char* fmt, ...)` | ✅ Sí        | ✅ **Sí**                                        |
| `logf`     | `void logf(const char* fmt, ...)`                            | ✅ Sí        | ✅ **Sí**                                        |
| `puts`     | `int puts(const char* s)`                                    | ❌ No        | ❌ No                                            |
| `exit`     | `void exit(int code)`                                        | ❌ No        | ❌ No                                            |
| `malloc`   | `void* malloc(size_t size)`                                  | ❌ No        | ❌ No                                            |
| `free`     | `void free(void* ptr)`                                       | ❌ No        | ❌ No                                            |
| `strlen`   | `size_t strlen(const char* s)`                               | ❌ No        | ❌ No                                            |
| `fopen`    | `FILE* fopen(const char* path, const char* mode)`            | ❌ No        | ❌ No                                            |
| `memcpy`   | `void* memcpy(void* dest, const void* src, size_t n)`        | ❌ No        | ❌ No                                            |
| `read`     | `ssize_t read(int fd, void* buf, size_t count)`              | ❌ No        | ❌ No                                            |

