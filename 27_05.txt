SUMAR PUNTO FLOTANT con FLOTANTE -------------------------------------------------------------------------------: 

.data
x:
    .byte 0xC3, 0xF5, 0x48, 0x40   // Representa 3.14f en formato float (IEEE 754)

y:
    .byte 0x66, 0x66, 0x06, 0x40   // Representa 2.10f en formato float (IEEE 754)

fmt:
    .byte 0x78, 0x20, 0x3D, 0x20, 0x25, 0x66, 0x0A, 0x00
    // 'x' ' ' '=' ' ' '%' 'f' '\n' '\0' en ASCII

.text
.global main
main:
    subq $8, %rsp

    movss x, %xmm1        
    movss y, %xmm0       
    addss %xmm1, %xmm0
    movss %xmm0, x         
    movss x, %xmm0
    cvtss2sd %xmm0, %xmm0

    movl $fmt, %edi       
    movl $1, %eax
    call printf

    xor %eax, %eax
    addq $8, %rsp
    ret

--------------------------------------------------------------------------------------------------------------------------------------------------
SUMAR ENTRE ENTERO Y ENTRE FLOTANTE: 

#include <stdio.h>

float x=3.14,y=2.1;

int main()
{
    printf("Hello World");
    
    x=x+y; 
    
    printf("x = %f",x);

    return 0;
}

---------------------------------------------------------------------------------------------------
SUMAR INT con FLOAT:

.data
    x: .float 3.14
    q: .byte 5
    v: .byte 0
    fmtx: .asciz "x = %f\n"
    fmtv: .asciz "v = %d\n"
    
.text
.global main
main:
	# your code goes here
	
	subq $8,%rsp
	

    movsbl          q, %eax
    cvtsi2ssl       %eax, %xmm1     //cvtsi2ssl: Convert Doubleword Integer to Scalar Single Precision Floating-Point Value
    movss           x, %xmm0        //movss: Move or Merge Scalar Single Precision Floating-Point Value
    addss           %xmm1, %xmm0    //addss: Scalar Single Precision Floating-Point Values
    movss           %xmm0, x
    
    movss           x, %xmm0
    cvttss2sil      %xmm0, %eax     //cvttss2sil: Convert With Truncation Scalar Single Precision Floating-Point Value to Integer
    movb            %al, v
    
    movss       x,%xmm0
    cvtss2sd    %xmm0,%xmm0         //cvtss2sd: Convert Scalar Single Precision Floating-Point Value to Scalar Double PrecisionFloating-Point Value 
    movl        $fmtx,%edi
    movl        $1,%eax
    call        printf
    
    movsbl      v,%esi
    movl        $fmtv,%edi
    movl        $0,%eax
    call        printf    
	
	xor	%eax, %eax
	addq $8,%rsp
	ret
----------------------------------------------------------------------------------------------------





Registros que no se deben modificar en una funcion (Convencion para Linux: calling convencion)! 

RSP 
RBX. Si lo quiero utilizar de todos modos le debo hacer push (para salvar el valor en la pila) y luego pop. 
EJ: 
pushq %rbx //guarda rbx y alinea el stack. 
popq %rbx
-y se deben sacar en orden inverso al que los met√≠ 

Preservar	rbx, rbp, r12, r13, r14, r15
(y el puntero de pila rsp, obviamente, debe restaurarse al final)
No preservar	rax, rcx, rdx, rsi, rdi, r8, r9, r10, r11


R12-R15: Porrque la funcion que llama los esta utilizando. 


