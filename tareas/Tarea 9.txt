------------------------------------------------ C --------------------------------------------------------------------------------------------
#include <stdio.h>
#include <stdint.h>

int8_t x[3]={23,126,-45};
int8_t z[3]={-45,4,103};
int32_t w;
int8_t i=1;             //prueba 1
//int8_t i=0;             //prueba 2

int main()
{

    if(x[i]>103)
    {
        w=z[i]+145;
    }
    else
    {
        w=x[i]+z[2];
    }
    
    printf("w = %d\n",w);

    return 0;
}


-------------------------------------------------- ATT ------------------------------------------------------------------------------------


.data

    x: .byte 23,126,-45
    z: .byte -45,4,103
    w: .long 0 
    i: .byte 0                  //prueba 1
    //i: .byte 0                  //prueba 2
    fmt: .asciz "w = %d\n"
    
.text
.global main
main:
	# your code goes here
	
	pushq   %rbx
	
    //if(x[i]>103)
    //{
    //TODO: cargar x[i] en registro dil
    movsbq i, %rax           // rax <-- (i) (64 bits)
    movb x(%rax), %dil       // dil <-- (x[i]) (8 bits)
    cmpb $103, %dil          // x[i] - 103 (32 bits)
    jg then1                     
    jmp else1 
    
    then1:
        //w=z[i]+145;
        //TODO: cargar z[i] en r8b, promover a 32 bits y realizar suma
        movb z(%rax), %r8b   // rb8 <-- (z[i]) (8 bits)
        movsbl %r8b, %r8d    // r8d <-- (z[i]) (32 bits) evitando Overflow
        addl $145, %r8d      // r8d <-- ((145) + z[i]) (32 bits)
        movl %r8d, w         // w <-- ((145) + z[i]) (32 bits)
        jmp endif1 
    //}
    //else
    //{
    else1:
        //w=x[i]+z[2];
        //TODO: cargar x[i] en dl y z[2] en bl, promover a 32 bits y sumar para evitar overflow 
        movb x(%rax), %dl    // dl <-- (x[i]) (8 bits)
        movsbl %dl, %edx     // edx <-- (x[i]) (32 bits)
        movb z+2, %bl        // bl <-- (z[2]) (8 bits)
        movsbl %bl, %ebx     // ebx <-- (z[2]) (32 bits)
        addl %edx, %ebx      // ebx <-- (z[2] + x[w])  (32 bits)   
        movl %ebx, w         // w <-- (z[2] + x[w])  (32 bits) 
         
         
    //}
    endif1:
	
	
	//printf("w = %d\n",w);
    //TODO:
    

    movl $fmt, %edi  // edi <-- fmt
    movl w, %esi     // esi <-- (w)
    movl $0, %eax    // eax <-- (0)
    call printf 
    
    
	
    //return 0;
	xor	%eax, %eax
	popq   %rbx
	ret
