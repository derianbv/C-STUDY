Print float number in hex:
https://onlinegdb.com/P7Ctw8aoSv 
Print float number in hex and in binary:
https://onlinegdb.com/_61YhlWBj 
//-------------------------------------------------------//
ASM links:
https://onlinegdb.com/NQPbYAcXD       Ej1: ASM
https://onlinegdb.com/uzcHgpy6Zb       Ej1: ASM : instructions suffixed with size letter
https://onlinegdb.com/ZbzwjNhbW       Ej1: Machine Code
https://onlinegdb.com/bXVilAhTY          Ej1: Machine Code
https://onlinegdb.com/cVqvUIC11         Ej1: ASM using printf
https://onlinegdb.com/dQv1-OSiV         Ej1: ASM using printf hex

nota flags:
 -no-pie -z noexecstack #esto va en la configuracion del GDB 
//----------------------------------------------------//

***************  https://onlinegdb.com/NQPbYAcXD       Ej1: ASM **********************************
/ Este sitio utiliza el ensamblador de GNU / 
#Esto hace lo mismo que el codigo de abajo solo que este está en Ensamblador#: 

.data    #Lugar en memoria en donde se guardan los datos. 
    x: .byte 5 #Trabaja con datos de 8 bits con signo. 
    y: .byte 0
.text #Lugar en memoria en donde se guardan los textos 
.global main
main: 
	# your code goes here
	mov x,%al
    add $3,%al
	mov %al,y
    xor	%eax, %eax  //con esto hacenos que eax quede en 0 (?). Como cuando termina la ejecucion del programa y sale esto "...Program finished with exit code 0", es decir, una garantía de que el programa termino hasta el final. 
	ret


******************************************************************************************************
 ********************    https://onlinegdb.com/ZbzwjNhbW       Ej1: Machine Code *************************
#Es el mismo código que arriba solo que esta vez en lenguaje de máquina. 

.data
    x: .byte 5
    y: .byte 0
.text
.global main
main:
	# your code goes here
	
    //movb x,%al #Esto esta comentado, lo que significa que el programa lee justamente solo bytes de 1 y 0s
    .byte 0x8a,0x04,0x25,0x10,0x40,0x40,0x00   #estos son solo bytes de 1 y 0s :o 
    //addb $3,%al
    .byte 0x04,0x03 
	//movb %al,y
	.byte 0x88,0x04,0x25,0x11,0x40,0x40,0x00 
	
    xorl   %eax, %eax
	ret

